// Example of how to extend the ToolManager with new tools

import { ToolManager } from './ToolManager.mjs';

export class ExtendedToolManager extends ToolManager {
    constructor() {
        super();
        this.registerCustomTools();
    }

    private registerCustomTools(): void {
        // Example: Adding a new weather tool
        this.registerTool({
            type: "function",
            name: "get_weather",
            description: "Get current weather for a Norwegian city. Respond in Norwegian.",
            parameters: {
                type: "object",
                properties: {
                    city: {
                        type: "string",
                        description: "Norwegian city name (e.g., 'Oslo', 'Bergen')",
                    },
                },
                required: ["city"],
                additionalProperties: false,
            },
            handler: ({ city }) => {
                // Mock weather data - in real implementation, you'd call a weather API
                const mockWeather = {
                    Oslo: "Delvis skyet, 15°C",
                    Bergen: "Regnvær, 12°C",
                    Trondheim: "Solskinn, 18°C",
                };
                
                const weather = mockWeather[city as keyof typeof mockWeather] || "Ukjent by";
                return { text: `Været i ${city}: ${weather}` };
            }
        });

        // Example: Adding a math calculation tool
        this.registerTool({
            type: "function",
            name: "calculate",
            description: "Perform basic mathematical calculations. Respond in Norwegian.",
            parameters: {
                type: "object",
                properties: {
                    expression: {
                        type: "string",
                        description: "Mathematical expression (e.g., '2 + 3', '10 * 5')",
                    },
                },
                required: ["expression"],
                additionalProperties: false,
            },
            handler: ({ expression }) => {
                try {
                    // Simple eval for demo - in production, use a proper math parser
                    const result = eval(expression);
                    return { text: `${expression} = ${result}` };
                } catch (error) {
                    return { text: `Kunne ikke beregne: ${expression}` };
                }
            }
        });
    }
}

// Usage example:
// const toolManager = new ExtendedToolManager();
// console.log('Available tools:', toolManager.getToolNames());
// console.log('Tool definitions:', toolManager.getToolDefinitions());
